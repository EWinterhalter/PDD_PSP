; ; -- basic variables
; ; deFfont = intraFont.load('assets/regular.pgf')
; ; local bg = Image.load('assets/bg.png')
; ; local LP = Image.load('assets/LP.png')
; ; pad, oldpad, currentfile, alpha = '', '', '', 0
; ; --if lang ~= 'Russian' then lang = 'English' end
; ; -- include asyncCycle functions
; ; --dofile('samples/asyncCycle.lua')
; ; -------------------------------------------------------------------------------
; ; local white = Color.new(255, 255, 255)  
; ; local black = Color.new(0, 0, 0)      
; ; local select = Color.new(255, 0, 127)  
; ; local grey = Color.new(200,200,200)
; ; local selectedColor = Color.new(255, 0, 127)   -- Цвет для выбранного квадрата

; ; -- Размеры и параметры
; ; local squareSize = 40  -- Размер квадрата
; ; local gap = 5          -- Расстояние между квадратами
; ; local startX = 10      -- Начальная позиция по X
; ; local startY = 10      -- Начальная позиция по Y
; ; local selectedX = 1    -- Выбранный столбец (1-10)
; ; local selectedY = 1    -- Выбранная строка (1-4)

; ; -- Таблица с номерами
; ; local numbers = {}
; ; for i = 1, 40 do
; ;     numbers[i] = tostring(i)
; ; end

; ; -- Переменные для управления задержкой
; ; local delay = 10  -- Задержка между переключениями (в кадрах)
; ; local counter = 0  -- Счетчик кадров

; ; -- Функция для отрисовки таблицы
; ; function drawTable()
; ;     screen.clear(white)  -- Очистка экрана белым цветом

; ;     for i = 1, 40 do
; ;         -- Вычисление позиции квадрата
; ;         local row = math.floor((i - 1) / 10)  -- Номер строки (0-3)
; ;         local col = (i - 1) % 10              -- Номер столбца (0-9)
; ;         local x = startX + col * (squareSize + gap)
; ;         local y = startY + row * (squareSize + gap)

; ;         -- Определение, является ли текущий квадрат выбранным
; ;         if col + 1 == selectedX and row + 1 == selectedY then
; ;             screen.drawRect(x, y, squareSize, squareSize, selectedColor)  -- Заливка выбранного квадрата
; ;         else
; ;             screen.drawRect(x, y, squareSize, squareSize, grey)  -- Обычный цвет для остальных квадратов
; ;         end

; ;         -- Вывод номера внутри квадрата
; ;         intraFont.print(deFfont, x + squareSize / 2, y + squareSize / 2 - 10, numbers[i])
; ;     end

; ;     screen.flip()  -- Вывод на экран
; ; end


; ; while true do
; ;     local pad = buttons.read() 

; ;     counter = counter + 1

; ; 	if pressed["circle"](pad) then
; ; 		screen.clear(white)
; ; 		screen.flip() 
; ; 	end
; ;     if counter >= delay then
; ;         if pressed["up"](pad) then
; ;             selectedY = selectedY - 1
; ;             if selectedY < 1 then selectedY = 4 end  -- Переход на последнюю строку
; ;             counter = 0  -- Сброс счетчика
; ;         elseif pressed["down"](pad) then
; ;             selectedY = selectedY + 1
; ;             if selectedY > 4 then selectedY = 1 end  -- Переход на первую строку
; ;             counter = 0  -- Сброс счетчика
; ;         elseif pressed["left"](pad) then
; ;             selectedX = selectedX - 1
; ;             if selectedX < 1 then selectedX = 10 end  -- Переход на последний столбец
; ;             counter = 0  -- Сброс счетчика
; ;         elseif pressed["right"](pad) then
; ;             selectedX = selectedX + 1
; ;             if selectedX > 10 then selectedX = 1 end  -- Переход на первый столбец
; ;             counter = 0  -- Сброс счетчика
; ;         end
; ;     end
; ;     drawTable()  -- Отрисовка таблицы
; ; end

; ; -- load an Image
; ; local image = Image.load('assets/pic.png')
; ; local modes = {num = 1, 'lUp', 'Center', 'rUp', 'lDn', 'rDn'}

; ; local x, y, w, h, color, xsrc, ysrc, cropw, croph, rotation, alpha = 0, 0, 480, 272, Color.new(0,0,0,0), 0, 0, 480, 272, 0, 255


; ; while true do
; ; 	screen.clear()
; ; 	pad = buttons.read()
	
; ; 	Image.draw(image, x, y, w, h, color, xsrc, ysrc, cropw, croph, rotation, alpha, Image[modes[modes.num]])
	
; ; 	print(240-intraFont.textW(deFfont, lines[lang][#lines[lang]])/2,200,Color.new(245,68,24),lines[lang][#lines[lang]])
	
; ; 	print(10,20,Color.new(245,68,24),'x: '..x)
; ; 	print(60,20,Color.new(245,68,24),'y: '..y)
; ; 	print(10,35,Color.new(245,68,24),'w: '..w)
; ; 	print(60,35,Color.new(245,68,24),'h: '..h)
; ; 	print(10,50,Color.new(245,68,24),'xsrc: '..xsrc)
; ; 	print(10,65,Color.new(245,68,24),'ysrc: '..ysrc)
; ; 	print(10,80,Color.new(245,68,24),'cropw: '..cropw)
; ; 	print(10,95,Color.new(245,68,24),'croph: '..croph)
; ; 	print(10,110,Color.new(245,68,24),'Align mode: '..modes[modes.num])
	
; ; 	print(245,20,Color.new(245,68,24),'Move ANALOG STICK to move picture.')
; ; 	print(278,35,Color.new(245,68,24),'Hold X/O button to zoom picture.')
; ; 	print(278,50,Color.new(245,68,24),'Hold SQUARE/TRIANGLE button\nto crop picture.')
; ; 	print(253,110,Color.new(245,68,24),'Press SELECT to change align mode.')
	
; ; 	if math.abs(buttons.Lx(pad)) > 60 then x = x + 2*math.modf(buttons.Lx(pad)/100) end
; ; 	if math.abs(buttons.Ly(pad)) > 60 then y = y + 2*math.modf(buttons.Ly(pad)/100) end
	
; ; 	if press('select') then
; ; 		if modes.num == #modes then
; ; 			modes.num = 1
; ; 		else
; ; 			modes.num = modes.num + 1
; ; 		end
; ; 	end
	
; ; 	if held('cross') then
; ; 		-- zoom +
; ; 		w = w + 2
; ; 		h = h + 1
; ; 	elseif held('circle') then
; ; 		-- zoom -
; ; 		w = w - 2
; ; 		h = h - 1
; ; 	elseif held('square') then
; ; 		-- crop +
; ; 		if xsrc < 480 then xsrc = xsrc + 2 end
; ; 		if ysrc < 272 then ysrc = ysrc + 1 end
; ; 		if cropw > 0 then cropw = cropw - 2 end
; ; 		if croph > 0 then croph = croph - 1 end
; ; 	elseif held('triangle') then
; ; 		-- crop -
; ; 		if xsrc <= 0 then xsrc = 0 else xsrc = xsrc - 2 end
; ; 		if ysrc > 0 then ysrc = ysrc - 1 end
; ; 		if cropw < 480 then cropw = cropw + 2 end
; ; 		if croph < 272 then croph = croph + 1 end
; ; 	end
	
; ; 	if held('l') then rotation = rotation - 2 end
; ; 	if held('r') then rotation = rotation + 2 end
	
	
; ; 	if press('start') then break; end
	
; ; 	oldpad = pad
; ; 	screen.flip()
; ; end

; ; Image.unload(image)
; ; sound.play('assets/bg.mp3', sound.MP3, false, true)
; -- basic variables
; deFfont = intraFont.load('assets/regular.pgf')
; local bg = Image.load('assets/bg.png')
; local LP = Image.load('assets/LP.png')
; pad, oldpad, currentfile, alpha = '', '', '', 0
; lang = System.getLang()
; if lang ~= 'Russian' then lang = 'English' end
; -- include asyncCycle functions
; dofile('samples/asyncCycle.lua')
; -------------------------------------------------------------------------------

; -- some basic functions
; function print(x, y, color, text, size, font)
; 	-- if font isn't load
; 	if font == nil then font = deFfont end
; 	if size == nil then size = 0.9 end
; 	-- set size
; 	intraFont.size(font, size)
; 	-- correct the y coordinate
; 	y = y + intraFont.textH(font)
; 	intraFont.printColored(font, x, y, text, color, size)
; end

; function press(button)
; 	if pressed[button](pad) and not pressed[button](oldpad) then
; 		oldpad = pad
; 		return true
; 	end
; end

; function held(button)
; 	if pressed[button](pad) then
; 		return true
; 	end
; end

; local show_logo = function()
; 	local logo = Image.load('assets/logo.png')
; 	local timered = timer.create()
; 	timer.start(timered)
; 	local x, y, w, h, a, done = 0, -272, 480, 272, 255, false
	
; 	while true do
; 		screen.clear()
		
; 		Image.draw(logo, x, y, w, h, Color.new(0,0,0,0), 0, 0, 480, 272, 0, a)
		
; 		if timered and timer.time(timered) > 10 then
; 			if y < 0 then
; 				y = y + 2
; 			else
; 				if h > 204 and not done then
; 					y = y + 2
; 					h = h - 2
; 				elseif h == 204 or h < 272 then
; 					done = true
; 					y = y - 2
; 					h = h + 2
; 				elseif done and h == 272 then
; 					if a > 0 then
; 						a = a - 2
; 					else
; 						break
; 					end
; 				end
; 			end
; 			timer.reset(timered)
; 			timer.start(timered)
; 		end
		
; 		screen.flip()
; 	end
	
; 	timer.remove(timered)
; 	Image.unload(logo)
; end

; -------------------------------------------------------------------------------

; -- color palette
; colors = {
; 	white = Color.new(255,255,255),
; 	black = Color.new(0,0,0),
; 	clear = Color.new(0,0,0,0),
; 	green = Color.new(107,157,118),
; 	blue = Color.new(76, 102, 240),
; }

; -------------------------------------------------------------------------------

; -- menu array
; local menu = {
; 	num = 1,
; 	time = '',
	
; 	Russian = {
; 		{name = 'Цвет', file = 'samples/color.lua', desc = 'Демонстрация функций работы\nс цветом. Создание нового цвета\nи получение значений [r], [g], [b],\n[a] уже созданного цвета.'},
; 		{name = 'Изображения', file = 'samples/image.lua', desc = 'Демонстрация функций для\nотображения и деформации\nизображений.'},
; 		{name = 'Звук', file = 'samples/sound.lua', desc = 'Демонстрация функций для\nработы со звуком. В том числе\nсчитывание ID3 тегов.'},
; 		{name = 'Системные функции', file = 'samples/system.lua', desc = 'Демонстрация функций для\nполучения системной\nинформации.'},
; 		{name = 'Таймер', file = 'samples/timer.lua', desc = 'Примитивные функции таймера.'},
; 		exit = 'Нажмите START, чтобы выйти\nв XMB.',
; 		demo = 'Демонстрационный образец.',
; 		demo2 = 'Список всех функций находится в файле "docs.txt".',
; 	},
	
; 	English = {
; 		{name = 'Color', file = 'samples/color.lua', desc = 'Color functions. Creating a new\ncolor and getting [r], [g], [b], [a] \nvalues of current color.'},
; 		{name = 'Image', file = 'samples/image.lua', desc = 'Functions to draw, move and\ndeform images.'},
; 		{name = 'Sound', file = 'samples/sound.lua', desc = 'Shows the usage of [sound] module.\nPlay/pause/stop functions\nand getting ID3 tags.'},
; 		{name = 'System', file = 'samples/system.lua', desc = 'Functions to get some system\ninformation.'},
; 		{name = 'Timer', file = 'samples/timer.lua', desc = 'Simple timer functions.'},
; 		exit = 'Press START to exit to XMB.',
; 		demo = 'Technical demo.',
; 		demo2 = 'Complete list of functions сan be found in "docs.txt" file.'
; 	},
; }

; lines = {
; 	Russian = {
; 		'Нажмите Х, чтобы сгенерировать случайный цвет.',
; 		'Стрелочки - громкость.',
; 		'Х - воспроизвести/О - остановить.',
; 		'Х - запустить таймер/О - остановить таймер.',
; 		'Треугольник - сбросить таймер.',
; 		'Нажмите START, чтобы выйти в меню.'
; 	},
	
; 	English = {
; 		'Press X to create a random color.',
; 		'D-Pad Left/D-Pad Right - volume.',
; 		'X - play/O - stop.',
; 		'X - start timer/O - stop timer.',
; 		'Triangle - reset timer.',
; 		'Press START to exit to main menu.'
; 	}
; }
; -------------------------------------------------------------------------------

; -- animation

; function blinkUPD()
; 	if alpha == 0 then
; 		asyncCycle:new(0,255,3,10,function(i) alpha = i end)
; 	elseif alpha == 255 then
; 		asyncCycle:new(255,0,-3,10,function(i) alpha = i end)
; 	end
; end

; System.message("Function of автосохранения is отсутствует.")
; show_logo()

; sound.play('assets/bg.mp3', sound.MP3, false, true)
; while true do
; 	-- clear the screen
; 	screen.clear()
; 	-- animations update
; 	asyncCycle:update()
; 	-- read buttons
; 	pad = buttons.read()
	
	
; 	menu.time = tostring(System.getTime().minutes):len() == 1 and '0'..System.getTime().minutes or System.getTime().minutes
	
; 	Image.draw(bg,0,0)
; 	blinkUPD()
; 	Image.draweasy(LP,270,40,colors.clear,0,alpha)
; 	print(478-intraFont.textW(deFfont,tostring(System.getTime().hour..':'..menu.time)),2,colors.white,tostring(System.getTime().hour..':'..menu.time))
	
; 	for i, v in ipairs(menu[lang]) do
; 		print(50,30 + i*12,(i == menu.num and colors.blue) or colors.white,v.name)
; 		if menu.num == i then
; 			currentfile = v.file
; 			print(260,150,colors.white,v.desc)
; 		end
; 	end
	
; 	print (260,200,colors.white,menu[lang].exit)
; 	print(240-intraFont.textW(deFfont, menu[lang].demo)/2,240,colors.white,menu[lang].demo)
; 	print(240-intraFont.textW(deFfont, menu[lang].demo2)/2,250,colors.white,menu[lang].demo2)
	
; 	if press('up') and menu.num > 1 then menu.num = menu.num - 1 end
; 	if press('down') and menu.num < #menu[lang] then menu.num = menu.num + 1 end
; 	if press('cross') then sound.stop(sound.MP3) dofile(currentfile) end
; 	if press('start') then LUA.quit() end
	
; 	-- read buttons x2
; 	oldpad = pad
; 	-- flip the screen
; 	screen.flip()
; end