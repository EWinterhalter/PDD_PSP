Документация к Lua Player by YuliaTeam beta 0.1

Данное ПО распространяется по условиям лицензии "МОЁНЕТРОГАТЬНОСМОТРЕТЬМОЖНО" и бла-бла-бла
---------------------------------------------------------------------------------------------------------------------------------------------

==============
Buttons/Кнопки
==============

buttons.read() - считывание состояния кнопок в принципе (исп. pad = buttons.read(); oldpad = pad)

buttons.Lx(pad/oldpad) - считывание состояния стика на оси х

buttons.Ly(pad/oldpad) - считывание состояния стика на оси у

pressed[button](pad/oldpad) - считывание состояния конкретной кнопки

Доступные значения button:
	- home
	- start
	- select
	- up
	- down
	- left
	- right
	- triangle
	- cross
	- square
	- circle
	- l
	- r
---------------------------------------------------------------------------------------------------------------------------------------------

==========
Color/Цвет
==========

Color.new(r, g, b, [a]) - создание нового цвета
	- r - содержание красного цвета (0-255)
	- g - содержание зелёного цвета (0-255)
	- b - содержание синего цвета (0-255)
	- a - прозрачность цвета (0-255) [опционально, по-умолчанию - 255]

Color.get(color, [R/G/B/A]) - получение содержания всех цветов или конкретного в указанном
	- color - заранее созданный цвет
	- R/G/B/A - конкретный цвет в составе [опционально, по-умолчанию возвращает таблицу со всеми значениями]
---------------------------------------------------------------------------------------------------------------------------------------------

===============
Graphix/Графика
===============

screen.clear([color]) - очистка экрана перед использованием
	- color - цвет, который будет выведен для очистки [опционально, по-умолчанию чёрный]

scree.flip() - вывод изображения с виртуального экрана на реальный

screen.drawRect(x, y, w, h, c, [a]) - отрисовка прямоугольника
	- x - положение на оси х
	- y - положение на оси у
	- w - ширина прямоугольника
	- h - высота прямоугольника
	- c - цвет прямоугольника
	- a - прозрачность прямоугольника [опционально, по-умолчанию 255]

screen.drawCircle(x, y, r, c) - отрисовка окружности
	- x - положение на оси х
	- y - положение на оси у
	- r - радиус окружности
	- c - цвет окружности

screen.drawTriangle(x1, y1, x2, y2, x3, y3, color) - отрисовка треугольника
	- х1, у1 - координаты первой вершины
	- х2, у2 - координаты второй вершины
	- х3, у3 - координаты третьей вершины

Image.load(path) - загрузка изображения
	- path - путь к изображению

Image.unload(img) - выгрузка изображения
	- img - предварительно загруженное изображение
	[ВЫГРУЗКА НЕОБХОДИМА, КОГДА ИЗОБРАЖЕНИЕ БОЛЬШЕ НЕ НУЖНО]

Image.w(img) - получение ширины изображения
	- img - предварительно загруженное изображение

Image.h(img) - получение высоты изображения
	- img - предварительно загруженное изображение

Image.draw(img, x, y, [w], [h], [c], [srcx], [srcy], [srcw], [srch], [r], [a], [alMode]) - отрисовка изображения
	- img - предварительно загруженное изображение
	- x - положение на оси х
	- y - положение на оси у
	- w - ширина изображения [опционально, по-умполчанию стандарнтная ширина загруженного изображения]
	- h - высота изображения [опционально, по-умполчанию стандарнтная высота загруженного изображения]
	- c - цвет для наложения на изображение [опционально, по-умолчанию {НИЧЕГО}]
	- srcx, srcy - координаты начала захвата рабочей области изображения [опционально, по-умолчанию 0, 0]
	- srcw, srch - координаты окончания захвата рабочей области изображения [опционально, по-умолчанию стандартная ширина и высота изображения]
	- r - угол поворота изображения [опционально, по-умолчанию 0]
	- a - прозрачность изображения [опционально, по-умолчанию 255]
	- alMode - режим выравнивания изображения [опционально, по-умолчанию Image.lUP]

Image.draweasy(img, x, y, [c], [r], [a], [alMode]) - упрощённая отрисовка изображения
	- img - предварительно загруженное изображение
	- x - положение на оси х
	- y - положение на оси у
	- c - цвет для наложения на изображение [опционально, по-умолчанию {НИЧЕГО}]
	- r - угол поворота изображения [опционально, по-умолчанию 0]
	- a - прозрачность изображения [опционально, по-умолчанию 255]
	- alMode - режим выравнивания изображения [опционально, по-умолчанию Image.lUP]

Доступные значения alMode:
	- Image.lUp - левый верхний угол
	- Image.Center - центр
	- Image.rUp - правый верхний угол
	- Image.lDn - левый нижний угол
	- Image.rDn - правый нижний угол
---------------------------------------------------------------------------------------------------------------------------------------------

===============
intraFont/Шрифт
===============

intraFont.load(path) - загрузка шрифта в формате .pgf
	- path - путь к файлу

intraFont.setStyle(font, s, c, sc, r, [align]) - выставление необходимых параметров шрифта
	- font - предварительно загруженный шрифт
	- s - размер шрифта
	- c - цвет шрифта
	- sc - цвет тени
	- r - угол наклона шрифта
	- align - режим выравнивания шрифта

	Режимы выравнивания шрифта:
		- intraFont.ALIGN_LEFT
		- intraFont.ALIGN_CENTER
		- intraFont.ALIGH_RIGHT

intraFont.print(font, x, y, text) - простой вывод текста
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода

intraFont.printColumn(font, x, y, w, c, s) - вывод текста колонной
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- w - ширина текста в пикселях
	- text - текст для вывода
	- c - цвет текста
	- s - размер текста

intraFont.printUnderlined(font, x, y, text, c, c2, [s])
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- c2 - цвет линии
	- s - размер текста [опционально, по-умолчанию 1]
    
intraFont.printContoured(font, x, y, text, c, c2, [s], [r]) - вывод обведённого контуром текста
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- c2 - цвет контура
	- s - размер текста [опционально, по-умолчанию 1]
	- r - угол наклона [опционально, по-умолчанию 0]

intraFont.printBackground(font, x, y, text, c, c2, [s]) - вывод текста на фоне рамки
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- c2 - цвет рамки
	- s - размер текста [опционально, по-умолчанию 1]

intraFont.printStriked(font, x, y, text, c, c2, [s]) - вывод перечёркнутого текста
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- c2 - цвет перечеркивающей линии
	- s - размер текста [опционально, по-умолчанию 1]

intraFont.printShadowed(font, x, y, text, c, c2, SHr, lD, [s], [r]) - вывод текста, отбрасывающего тень
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- c2 - цвет тени
	- SHr - угол падения света на текст
	- lD - удалённость источника света от текста
	- s - размер текста [опционально, по-умолчанию 1]
	- r - угол наклона [опционально, по-умолчанию 0]

   
intraFont.printReversed(font, x, y, text, c, [s], [r]) - вывод развёрнутого текста
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- s - размер текста [опционально, по-умолчанию 1]
	- r - угол наклона [опционально, по-умолчанию 0]

intraFont.printColored(font, x, y, text, c, [s], [r]) - простой вывод текста нужного цвета
	- font - предварительно загруженный шрифт
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода
	- c - цвет текста
	- s - размер текста [опционально, по-умолчанию 1]
	- r - угол наклона [опционально, по-умолчанию 0]


intraFont.size(font, s) - изменение размера шрифта
	- font - предварительно загруженный шрифт
	- s - новый размер

intraFont.textW(font, text) - измерение занимаемого текстом пространства в пикселях (строка без переносов)
	- font - предварительно загруженный шрифт
	- text - текст для измерения

	РЕКОМЕНДУЕТСЯ: ПЕРЕД ИЗМЕРЕНИЕМ ЗАНИМАЕМОГО ПРОСТРАНСТВА ВЫСТАВЬТЕ РАЗМЕР ЧЕРЕЗ intraFont.size()

intraFont.textH(font) - измерение высоты шрифта
	- font - предварительно загруженный шрифт

---------------------------------------------------------------------------------------------------------------------------------------------

==========
Sound/Звук
==========

sound.play(path, channel, loadToRAM, loop) - воспроизведение аудиофайла
	- path - путь к файлу .mp3/.wav/.ogg/.at3
	- channel - канал для загрузки звука
	- loadToRAM - загрузка в ОЗУ (true, если вы хотите, чтобы после выхода из спящего режима консоль продолжала воспроизведение .wav, однако объём ОЗУ будет постепенно уменьшаться;
	на PSP GO при использовании внутренней памяти в любом случае воспроизведение будет продолжаться;
	.ogg/.at3 форматы не поддерживают данную функцию)

	- loop - повторение проигрывания

	РЕКОМЕНДУЕТСЯ ВОСПРОИЗВЕДЕНИЕ ТОЛЬКО .MP3 и .WAV аудиофайлов

sound.info() - чтение ID3 тегов из mp3 файла
	Возвращает таблицу вида:
		- title (название)
		- artist (исполнитель)
		- album (альбом)
		- year (год)
		- genre (жанр)
		- id3v (версия ID3)
		- track (номер в альбоме)

sound.pause(channel) - приостановка воспроизведения
	- channel - канал для приостановки

sound.volume(channel, volume) - изменение громкости воспроизведения
	- channel - канал для изменения громкости
	- volume - новая громкость (0-100)

sound.stop(channel) - остановка воспроизведения
	- channel - канал для остановки

sound.state(channel) - получение информации о канале
	- channel - канал для получения информации

	Возвращает таблицу вида:
		- state (playing/paused/stopped)
		- free (true/false)

sound.unload(channel) - выгрузка аудиофайла из канала (работает только с .wav/.at3/.ogg, для .mp3 достаточно sound.stop())
	- channel - канал для выгрузки

	Доступные каналы:
		==============
		- sound.MP3
		==============
		- sound.WAV_1
		...
		- sound.WAV_31
		==============
		- sound.OGG_1
		...
		- sound.OGG_10
		==============
		- sound.AT3_1
		- sound.AT3_2
		==============

---------------------------------------------------------------------------------------------------------------------------------------------

========================
System/Системные функции
========================

System.rename(file, newName) - переименование папки/файла
	- file/папка - файл для переименования
	- newName - новое имя

System.removeFile(file) - удаление файла
	 - file - файл для удаления

System.removeDir(folder) - удаление папки
	- folder - папка для удаления

System.createDir(name) - создание новой папки
	- name - имя для новой папки

System.getBatteryPercent() - получение заряда АКБ в процентах

System.getBatteryLifeTime() - получение оставшегося времени работы АКБ в минутах

System.getCPU() - получение частоты процессора

System.getModel() - получение модели консоли

System.getTime() - получение времени, выставленной на консоли
	Возвращает таблицу вида:
		- hour
		- minutes
		- seconds
		- microseconds
		- year
		- month
		- day

System.getOSV() - получение версии официальной прошивки

System.GC() - очистка ОЗУ от "LUA-мусора" (работает чуть эффективней, чем стандартный collectgarbage)

System.currentDir(directory) - смена рабочей директории
	- directory - новая рабочая директория 

System.listDir(directory) - чтение файлов, находящихся в указанной директории
	- directory - директория для чтения [если директория не указана, возвращает список файлов из текущей рабочей директории]

System.LowCPU() - выставление скорости 100 mHz для процессора

System.MedCPU() - выставление скорости 222 mHz для процессора

System.HighCPU() выставление скорости 333 mHz для процессора

System.OSK(text, desc) - вызов системной клавиатуры PSP
	- text - текст, изначально напечатанный в отведённом поле
	- desc - описание текста, который необходимо ввести


	[Пример использования: value = System.OSK("sample text", "sample description")]

System.message(message, [mode]) - вызов системного сообщения
	- message - текст выводимого сообщения
	- mode - режим (0 - стандарт [только кнопка О]; 1 - режим Да/Нет [кнопки Да/Нет]) [опционально, по-умолчанию 0]

System.buttonPressed() - получение информации о том, какая кнопка была нажата во время вызова System.message()
	Возвращает [Yes/No/Back]

System.getNickname() - получение никнейма консоли
 
System.getLang() - получения языка, выставленного на консоли

---------------------------------------------------------------------------------------------------------------------------------------------

============
Timer/Таймер
============

timer.create() - создание нового таймера
	[Пример использования: timered = timer.create()]

timer.start(timered) - запуск таймера
	- timered - заранее созданный таймер

timer.time(timered) - получение времени, отсчитанного таймером в миллисекундах
	- timered - заранее созданный таймер

timer.stop(timered) - остановка таймера
	- timered - заранее созданный таймер

timer.reset(timered) - остановка и сброс таймера
	- timered - заранее созданный таймер

timer.remove(timered) - удаление таймера
	- timered - заранее созданный таймер

---------------------------------------------------------------------------------------------------------------------------------------------

===========
LUA-функции
===========

LUA.print(x, y, text) - вывод текста системным шрифтом
	- x - координата вывода на оси х
	- y - координата вывода на оси у
	- text - текст для вывода

LUA.getRandom(max) - генерация случайного числа (замена стандартного math.random())
	- max - максимально генерируемое число

LUA.freeRam() - получение доступного количества ОЗУ в кб

LUA.screenshot(path) - создание скриншота экрана
	- path - путь для сохранения скриншота (только .png)

	ПРИМЕЧАНИЕ: для корректного создания скриншотов на эмуляторе PPSSPP необходимо включить программный рендеринг

LUA.exit() - выход в XMB

LUA.quit() - выход в XMB




































